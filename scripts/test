#!/bin/bash
set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd $SCRIPT_DIR
cd ../

RAND=$(echo $RANDOM | md5 | head -c 16)

export POSTGRES_DATABASE=postgres
export POSTGRES_USERNAME=doggiedb
export POSTGRES_PASSWORD=doggiedb
export MONGO_DATABASE=doggiedb
export MONGO_USERNAME=doggiedb
export MONGO_PASSWORD=doggiedb
export MONGO_AUTHSOURCE=admin
export MONGO_REPLICA_SET=rs0

docker run -d --rm --name postgres_test_db_${RAND} \
  -p 5432:5432 \
  -e "POSTGRES_USER=${POSTGRES_USERNAME}" \
  -e "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" \
  -e "POSTGRES_DB=${POSTGRES_DATABASE}" \
  postgres

# docker run -d --rm --name mongo_test_db_${RAND} \
#   -p 27017:27017 \
#   mongo --replSet ${MONGO_REPLICA_SET}

function cleanup {
  docker stop postgres_test_db_${RAND}
  # docker stop mongo_test_db_${RAND}
}

trap cleanup EXIT

docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" postgres_test_db_${RAND}
# docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" mongo_test_db_${RAND}

# sleep 1
# TIMER=0

# until docker exec --tty mongo_test_db_${RAND} mongosh 'admin' --eval 'quit(0)'; do
#   sleep 1
#   echo "."
#   TIMER=$((TIMER + 1))

#   if [[ $TIMER -eq 20 ]]; then
#     echo "MongoDB did not initialize within 20 seconds. Exiting."
#     exit 2
#   fi
# done

# docker exec --tty mongo_test_db_${RAND} mongosh --eval "
#   rs.initiate({
#     _id: '${MONGO_REPLICA_SET}',
#     members: [{
#        _id: 0,
#       host: 'localhost'
#     }]
#   })
# "

# docker exec --tty mongo_test_db_${RAND} mongosh admin --eval "
#   db.createUser({
#     user: '${MONGO_USERNAME}',
#     pwd: '${MONGO_PASSWORD}',
#     roles:[{
#       role: 'root',
#       db: 'admin'
#     }]
#   })
# "

yarn test
